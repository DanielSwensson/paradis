#+STARTUP: overview, hideblocks
#+BEGIN_kv
title: Sequential Erlang 
subtitle: Lectures F2 + F3 (Chapters 1..6)
author: Joe Armstrong
copyright: \copyright 2014 -- Joe Armstrong
email: joe.armstrongericsson.com, joearms@gmail.com
affiliation: Ericsson AB
process: orgmode_plugin_slides
#+END_kv

* Concurrent Erlang

Really I'd like to start the course with concurrent and distributed
programming. \textcolor{Red}{But we have to learn to write sequential programs
before we can write concurrent programs}.

Learning to write sequential Erlang programs takes a while. 
It's a functional programming language and it takes a while to get used to this.

Writing concurrent programs is {\sl easy} - but debugging them can be
hard.

Some distributed problems are \textcolor{red}{impossible} to solve {\sl
there are theorems about this} -  we won't solve these :-)

* What we'll do
** Learn Sequential Erlang.
** Learn Concurrent Erlang.
** Leann Distributed Erlang.
** Learn How to write concurrent and parallel programs.
** Make a bit-torrent like program ``the Erlang way''.
** Start a company and earn a trillion dollars (not in this course).
** Change the world.
** Have fun.

* and how we will do it...
** Each week will cover a continuous sequence of chapters from {\sl Programming Erlang}.
** This week cover chapters 1..6.
** There is one set of slides and one set of problems per week.
** The lectures have a lot of live coding (not in the slides).
** The exercises must be done within a week.
** You get out of the course what you put into it. 
** Warn me if I drift off topic :-) {\sl we can always talk after the lectures}.
   
* How to learn any programming language
** Get a decent book.
** Type in all the examples (do not cut and paste examples).
** There is a slow method to learn languages {s\ Google for the answer to every problem...}

* The course website
** Assignments and other material are at \url{https://github.com/joearms/paradis/blob/master/week4_problems.erl}.
** It's a GIT repository. Please push changes to me. {\sl help me improve the course better}.
   
* Help me improve the course
** We start with a emacs org-mode, this file is \verb+f2-f3.org+.
** Erlang parses this and transforms it into \verb+f2-f3.org.tex+) it adds color coding of code and a few other nice things.
** Run \verb+pdflatex+ twice and get \verb+f2-f3.org.pdf+.
** This system was written last week and is possibly buggy.
** Please help me improve the material. Push all changes to github.
** There are no course credits for helping.
** \textcolor{Red}{tell me if the examples are too easy or difficult}. They should take N hours/week. What is N?

* Let's get started
	
#+BEGIN_image
height:10cm
image:Erlang.jpg
title:Agner Krarup Erlang (1878 - 1929)
#+END_image
  
* Erlang

** Erlang was designed for building {\bf fault-tolerant}, {\bf concurrent}, {\bf scaleable} applications.
** The world {\sl is} concurrent.
** Erlang belongs to the {\bf actor} family of languages. There are two types of concurrency:
** Shared-Memory Concurrency (Lectures F16..F18).
** Message Passing Concurrency - Sending and receiving messages is the only way for processes to exchange data.
** We never know if a message is received (it might get lost on the way) - If you want to know if a message has been received then send a reply.
** Message passing is ``Location transparent'' (like sending letter in the mail).
   
* Erlang 

** ``Functional'' core.
** ``Math'' variables.
** \textcolor{red}{Beautiful syntax}.
** No mutable data (not really true).
** Concurrency (and parallelism) is built-in.
** Inbuilt fault-tolerance.
** Modules.
** Not OO (Actors).
** Practical.
** Battle Tested (not a theory).

* Starting the shell

** Mac OX-S, *nix:

\verb+> erl+

** Windows:

\verb+Programs -> OTP ... -> Erlang+


#+BEGIN_shell
$ erl
Erlang (BEAM) emulator version 5.5.4 [source] 
  [async-threads:0] [kernel-poll:false]
Eshell V5.5.4  (abort with ^G)
1> 1 + 2 * 3.
7
#+END_shell

* Stopping the shell

** \verb|(ctrl)+\| -- immediate exit
** \verb+init:stop()+ -- controlled exit
** \verb+erlang:halt()+ -- uncontrolled exit
** \verb|(ctrl)+C|

#+BEGIN_shell
BREAK: (a)bort (c)ontinue (p)roc info (i)nfo 
       (l)oaded (v)ersion (k)ill (D)b-tables 
       (d)istribution
a
#+END_shell

* Shell commands

** Shell is \verb+read-eval-print+ loop.
** Commands end \verb+.+\textcolor{Red}{WS}.
** Repeated prompt means command is not yet finished:

#+BEGIN_shell
1> 12234 * 12313.
150637242
2> math:sqrt(2).
1.41421
3> [123, abc,"hello"].
[123,abc,"hello"]
4> 1234 +
4> 34524249 *
4> 11112231.
383641429990753
#+END_shell

* Using the shell
** REPL (Read Eval Print Loop) is typical for this type of language.
** Same of all platforms (good for windows).
** A session: \textcolor{Red}{Show this}:

#+BEGIN_shell
$erl
...
1> X = 23+10.
33
2> X + X.
66
...
#+END_shell
   
** \textcolor{Red}{All expressions end in ``.''}.
** Quit with \verb+q()+ or \verb+^C+.
** Emacs conventions apply in the shell.

* Variables don't vary

** \textcolor{Red}{Variable start with an uppercase letter} and are bound with =:

#+BEGIN_shell
$erl
...
1> X = 10.
10
2> X = 20.
  exception error: 
   no match of right hand side value 20
...
3> X1 = 20.
20
#+END_shell

** Use a new variable each time (more later)

* Data Types
Erlang has two types of data.
There are {\sl Primitive data types} (atoms, integers, floats) etc. and
{\sl Compound data types}. Compound data types glue together 
data. The two most common forms of glue are {\sl Lists} and
{\sl Tuples}. Records provide syntactic sugar for accessing tuples.
{\sl maps} are associative Key-Value stores.

#+BEGIN_shell
> X = abc.
abc
> Y = 123.
123
> L = [abc,123].
[abc,123]
> M = [xyz,L,1234].
[xyz,[abc,123],1234]
#+END_shell

* Strings
** There are no strings in Erlang.
** Strings are lists of integers:
#+BEGIN_shell
1> "abc".
"abc".
2> [abc|"abc"].
[abc,97,98,99]
#+END_shell

* Primitive Data Types

** Atoms \verb+monday+ \verb+tuesday+ - \textcolor{Red}{Remember atoms start with a lower case letters}.
** Booleans \verb+true+ \verb+false+.
** Integers 123, 213091038018301830810381038018, 16\#f234, 2\#23, \$a:

#+BEGIN_shell
> x = abc.
  exception error: 
  no match of right hand side value abc
> x = x.
x
#+END_shell

* Numbers
** Integers:

#+BEGIN_sublist
1234 
27391836713581739719319837917391739173218361836
16\#ca23ad12 -- hex
2\#1010101   -- base 2
N\#DDDDD     -- base D
\$a (asci code for a = 97)
#+END_sublist


** Floats.
** Atoms:

#+BEGIN_sublist
Booleans \verb+true+, \verb+false+
Constants \verb+monday+, \verb+tuesday+
#+END_sublist

* Compound Data (Lists)

** Lists are containers for a \textcolor{red}{variable} number of items.
** \verb+X = [1,2,3,abc,true]+ - Even complex items can be in the list.
** \verb+[Head|Tail]+ is used to construct or deconstruct a list:

#+BEGIN_shell
> L = [1,2,3,4].
[1,2,3,4]
> [H|T] = [1,2,3,4].
[1,2,3,4]
> H.
1
> T.
[2,3,4]
#+END_shell

* Constructing a list
#+BEGIN_shell
> T = [1,2,3].
[1,2,3]
> H = a.
a
> [H|T].
[a,1,2,3]
#+END_shell
  
* What is a list (really)

** It's a cons cell in LISP.
** It's ``linked list'' in C.

* Tuples

** Tuples are containers for a \textcolor{red}{fixed} number of items:

#+BEGIN_shell
> X = {1,2,3}.
{1,2,3}.
> {_,Y,_} = X.
{1,2,3}.
> Y.
2
#+END_shell

* Patterns

** A ``Term'' is an atomic or compound data value.
** A ``Pattern'' is a data value or a variable.
** Variables are bound in pattern matching operations:

#+BEGIN_shell
> X = {1,2,1}.
{1,2,1}
> {Z,A,Z} = X. ???
> {P,Q,R} = X. ???
...
#+END_shell

** If variables are repeated in a pattern then they must bind to the same value.
** \verb+_+ is a wildcard (matches anything).

* Unpacking  a list

#+BEGIN_shell
> L = [1,2,3,4].
[1,2,3,4]
> [H|T] = L.
[1,2,3,4]
> H.
1
> T.
[2,3,4]
#+END_shell

** \textcolor{red}{Show lot's of examples}.  

* Functions

** Multiple Entry Points

#+BEGIN_erlang
area({square,X}) -> X*X;
...
area({rectangle,X,Y}) -> X*X.
#+END_erlang
  
** C/Javascript/... have single entry points so don't write:

\begin{Verbatim}
function area(X){
   if(X.type == 'square'){
      ...
   } elseif{X.type='rectangle'){
      ...
}
\end{Verbatim}

* Modules
** All code is defined in modules.
** Modules are the unit of compilation.
** Modules can live-upgraded.
** Modules limit the visibility of internal functions.
* Structure of a Module
** Modules look like this:
#+BEGIN_erlang
-module(math1).
-export([area/1]). 

area({square,X}) -> X*X;
area({rectangle,X,Y}) -> X*Y.
#+END_erlang
** The filename \textcolor{red}{must} be \verb+math1.erl+:
#+BEGIN_shell
$ erl
1> c(math1).
{ok,math1}
2> math1:area({square,12}).
144
#+END_shell
* Punctuation
** DOT whitespace ends a function.
** Semicolon ``;'' separates clauses.
** Comma ``,'' separates arguments.
** Getting the punctuation wrong is the single biggest mistake beginners make.
** Use a text editor that matches parentheses.
 
* Add Unit tests
** Add unit test like this:
#+BEGIN_erlang
-module(math2).
-export([test/0, area/1]). 

test() ->
    144 = area({square,12}),
    200 = area({rectangle,10,20}),
    hooray.

area({square,X}) -> X*X;
area({rectangle,X,Y}) -> X*Y.
#+END_erlang

* Exports
#+BEGIN_erlang
-module(mod1).
-export([func1/2, func3/2]). %% public stuff

func1(X, Y) ->    %% A public function
   boo(X, Y, 12).

boo(X, Y, X) ->   %% A private function
   ...
#+END_erlang

** Cheat \verb+-compile(export_all).+

* Imports

** Imports permit a short form of the calling sequence.
** Late Binding - always calls the latest version of the code:

#+BEGIN_erlang
-module(mod1).
-import(lists, [reverse/1]).

func1(L) ->
   L1 = reverse(L). %% it's really lists:reverse
#+END_erlang

** Cheat \verb+-compile(export_all).+
* Assignments

Fetch \url{https://github.com/joearms/paradis/blob/master/week4_problems.erl}

It's {\sl approximately}:

#+BEGIN_erlang
-module(week4_problems).
-compile(export_all).
-export([test/0]).

test() ->
    120 = ex1:factorial(5),
    L = [a,b,c,d,e,f],
    [b,c,d,e,f,a] = ex1:rotate(1,L),
    [f,a,b,c,d,e] = ex1:rotate(-1,L),
    ... 
    horray.
#+END_erlang

* Did I get the assignments right?

** Check in the shell

#+BEGIN_shell
$ erl
1> c(week4_problems).
{ok,week4_problems}
2> c(ex1).
{ok,ex1}
3> week4_problems:test().
horray
#+END_shell

* case expression
#+BEGIN_erlang
area(A) ->
    case A of
       {square, X} ->
           X*X;
       {rectangle, X, Y} ->
           X*Y
       ...
    end
#+END_erlang   

Or:

#+BEGIN_erlang
area({square,X}) -> X*X;
area({rectangle,X,Y}) -> X*Y.
#+END_erlang   

* if expression
#+BEGIN_erlang
weekend(Day) ->
    if
       Day == saturday -> 
          true;
       Day == sunday -> 
          true;
       true ->
          false
    end.
#+END_erlang   
  
** if is an \textcolor{red}{expression} and not an statement.
* Funs
** define own control abstractions:
   
#+BEGIN_erlang
for(Max,Max,F) -> [F(Max)];
for(I, Max, F) -> [F(I) | for(I+1,Max,F)].
#+END_erlang   
   
#+BEGIN_shell
1> D = fun(X) -> 2*X end.
#Fun<erl_eval.6.17052888>
2> hofs:for(1,10,D).
[2,4,6,8,10,12,14,16,18,20]
3> 
#+END_shell

* Simple list recursion
#+BEGIN_erlang
double([]) -> [];
double([H|T]) -> [2*H|double(T)].
#+END_erlang   

#+BEGIN_shell
3> c(math1).
{ok,math1}
4> math1:double([1,2,3,4,5]).
[2,4,6,8,10]
#+END_shell

* Accumulators

#+BEGIN_erlang
sum(L) -> sum_helper(L, 0).

sum_helper([], N) -> N;
sum_helper([H|T], N) ->
    N1 = N + H,
    sum_helper(T, N1).
#+END_erlang   
   
#+BEGIN_shell
1> math1:sum([1,2,3,4,5]).
15
#+END_shell

* sum\_and\_double

** travserses the list twice

#+BEGIN_erlang
sum_and_double(L) ->
    Sum = sum(L),
    Double = double(L),
    {Sum, Double}.

double([]) -> [];
double([H|T]) -> [2*H|double(T)].

sum([]) -> 0;
sum([H|T]) -> H + sum(T).
#+END_erlang   
   
#+BEGIN_shell
8> lists1:sum_and_double([1,2,3,4]). 
{10,[2,4,6,8]}
#+END_shell

* sum\_and\_double1

** traverses the list once -- \textcolor{Red}{gets the answer wrong} 

#+BEGIN_erlang
sum_and_double1(L) -> 
    sum_and_double_helper1(L, [], 0).

sum_and_double_helper1([H|T], L, N) ->
    sum_and_double_helper1(T, [2*H|L], N + H);
sum_and_double_helper1([], L, N) ->
    {N, L}.
#+END_erlang   
   
#+BEGIN_shell
8> lists1:sum_and_double1([1,2,3,4]). 
{10,[8,6,4,2]}
#+END_shell

* sum\_and\_double2

** traverses the list once -- \textcolor{Red}{gets the answer right} 

#+BEGIN_erlang
sum_and_double2(L) -> 
    sum_and_double_helper2(L, [], 0).

sum_and_double_helper2([H|T], L, N) ->
    sum_and_double_helper2(T, [2*H|L], N + H);
sum_and_double_helper2([], L, N) ->
    {N, lists:reverse(L)}.
#+END_erlang   
   
#+BEGIN_shell
8> lists1:sum_and_double2([1,2,3,4]). 
{10,[2,4,6,8]}
#+END_shell
   
* sum\_and\_double3

** Renamed the helper function.
   
#+BEGIN_erlang
sum_and_double3(L) -> 
    sum_and_double3(L, [], 0).

sum_and_double3([H|T], L, N) ->
    sum_and_double3(T, [2*H|L], N + H);
sum_and_double3([], L, N) ->
    {N, lists:reverse(L)}.
#+END_erlang   
   
#+BEGIN_shell
1> lists1:sum_and_double2([1,2,3,4]). 
{10,[2,4,6,8]}
#+END_shell

* Natural order in lists

** Write the code using accumulators.
** Don't bother if the lists come out in the wrong order.
** Reverse the order at the end.
** \verb+lists:reverse+ is a BIF not a function call \textcolor{red}{but it looks like a BIF}.
* Tail Recursion
** The last thing you do is call another routine
** really ``last call optimization''

\begin{Verbatim}
function a(){
   call x
   call y
}

call x is compiled as:
  push address of y
  call x

the call to y (a lastcall) is compiled as
  jmp y
\end{Verbatim}

* BIFS
** Do things that are impossible in erlang ( \verb+atom_to_list(abc)+).

** Do things that are slow in erlang ( \verb+lists:reverse/1+).
** Look like erlang function calls

* Apply
  
** \verb+apply(Mod, Func, [Arg1, Arg2, ..., ArgN])+ -- same as \verb+Mod:Func(Arg1, Arg2, ..., ArgN)+

#+BEGIN_shell
1> apply(lists, reverse, [[1,2,3,4]]).
[4,3,2,1]
#+END_shell

* Guards
#+BEGIN_erlang
upcase(X) when $a =< X andalso X =< $z ->
    X -$a + $A;
upcase(X) ->
    X.
#+END_erlang   
   
#+BEGIN_shell
1> c(lists1).
{ok,lists1}
2> lists1:upcase($a).
65
3> $a.
97
#+END_shell

* List Comprehensions
** \verb+[ Expression || Pattern <- List]+

#+BEGIN_shell
1> [lists1:upcase(I) || I <- "hello"].
"HELLO"
2> [{X,Y} || X <- [1,2,3], Y <- [a,b,c]]. 
[{1,a},{1,b},{1,c},
 {2,a},{2,b},{2,c},
 {3,a},{3,b},{3,c}]
#+END_shell

* Tuple programs
** Store tree like data structures in tuple
** XML

The XML \verb+<tag1 a1="abc" a2="def"> ... </tag1>+ can be represented
as \verb+{tag1, [{a1,"abc"},{a2,"def"}], [ ...]}+

#+BEGIN_erlang
path_search([Tag|T],[{Tag,_,Children}|_]) ->
    path_search(T, Children);
...
#+END_erlang

* Records
** What do the elements in a tuple mean?

#+BEGIN_erlang
X = {person,"zabdog","polgelzipper",42,22,....}
#+END_erlang

#+BEGIN_erlang
-record(person,
   {firstname, lastname, footsize, age,
    ....}).

X = #person{age=20, footsize=10}

birthday(X) ->
     Age = X#person.age,
     X#person{age=Age+1}.
#+END_erlang

* Typed Records 1

** We can add types to the fields.
** Can be checked by the dialyzer.
** Informative only:

#+BEGIN_erlang
-record(person,
   {firstname :: string(),
    lastname :: string(),
    footsize :: integer(),
    age :: integer(),
    ....}).
#+END_erlang

** What's wrong with this?
  
* Typed Records 2

#+BEGIN_erlang
-type months() :: integer().

-record(person,
   {firstname :: string(),
    lastname :: string(),
    footsize :: integer(),
    age :: months(),
    ....}).
#+END_erlang
  
* Catch
#+BEGIN_shell
1> X = atom_to_list(1).
** exception error: bad argument
     in function  atom_to_list/1
        called as atom_to_list(1)
2> X.
 1: variable 'X' is unbound
3> X = (catch atom_to_list(1)).
{'EXIT',{badarg,
    [{erlang,atom_to_list,[1],[]},
     {erl_eval,do_apply,6,[{file,"erl_eval.erl"},{line,573}]},
                 ...
#+END_shell

* Try ... catch, catch .. throw
#+BEGIN_erlang
try F() 
catch
   exit:... ->
   throw:... ->
   error:... ->
after
   ...
end
#+END_erlang
  
* ++  and --

** X \verb|++| Y is an infix notation for \verb+lists:append(X,Y)+
** Takes time \verb+O(length(X)).+

#+BEGIN_shell
> "abc" ++ "123".
"abc123"
> "abc123" -- "abc".
"123"
> "abc123" -- "123".
"abc"
> "abc123xyz" -- "123".
"abcxyz"
> "abc12xyz" -- "123". 
"abcxyz"
#+END_shell
